import java.util.regex.Pattern

apply plugin: 'com.android.application'
android {
    compileSdkVersion 19
    buildToolsVersion '19.1.0'
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 19
    }
    buildTypes {
        debug {
            runProguard false
        }
    }
    productFlavors {
        de_ru {
            applicationId 'com.learnit.dict_de_ru'
        }
        en_ru {
            applicationId 'com.learnit.dict_en_ru'
        }
        en_uk {
            applicationId 'com.learnit.dict_en_uk'
        }
        es_en {
            applicationId 'com.learnit.dict_es_en'
        }
    }

    if (project.hasProperty("learnit.signing")
            && new File(project.property("learnit.signing") + ".gradle").exists()) {
        apply from: project.property("learnit.signing") + ".gradle";
    }
}

buildscript {
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.2'
    }
    repositories {
        mavenCentral()
    }
}
repositories {
    mavenCentral()
}
dependencies {
    compile 'com.android.support:support-v13:20+'
    compile 'com.github.dmytrodanylyk.circular-progress-button:library:1.1.3'
}

task('increaseVersionCode') << {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def versionCode = Integer.parseInt(matcher.group(1))
    def manifestContent = matcher.replaceAll("versionCode=\"" + ++versionCode + "\"")
    manifestFile.write(manifestContent)
}

task('increaseBuildVersion') << {
    def stringsSource = file("src/main/res/values/donottranslate.xml")
    def pattern = Pattern.compile("<string name=\"version\">(\\d+)\\.(\\d+)\\.(\\d+)</string>")
    def versionText = stringsSource.getText()
    def matcher = pattern.matcher(versionText)
    matcher.find()
    def majorVersion = Integer.parseInt(matcher.group(1))
    def minorVersion = Integer.parseInt(matcher.group(2))
    def buildVersion = Integer.parseInt(matcher.group(3))
    def mNextVersionName = majorVersion + "." + minorVersion + "." + (buildVersion + 1)
    def newStrings = matcher.replaceAll("<string name=\"version\">" + mNextVersionName + "</string>")
    stringsSource.write(newStrings)
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease') {
        task.dependsOn 'increaseVersionCode'
        task.dependsOn 'increaseBuildVersion'
    }
    if (task.name == 'assembleDebug') {
        task.dependsOn 'increaseVersionCode'
        task.dependsOn 'increaseBuildVersion'
    }
    if (task.name == 'generateReleaseBuildConfig') {
        task.dependsOn 'increaseVersionCode'
        task.dependsOn 'increaseBuildVersion'
    }
    if (task.name == 'generateDebugBuildConfig') {
        task.dependsOn 'increaseVersionCode'
        task.dependsOn 'increaseBuildVersion'
    }
}
